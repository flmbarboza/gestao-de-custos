import streamlit as st
import pandas as pd

def main():
    st.title("üìù Simulador de Prova - Custeio por Absor√ß√£o")
    st.markdown("""
    Teste seus conhecimentos sobre custeio por absor√ß√£o b√°sico e avan√ßado.
    *Responda todas as quest√µes e verifique seu resultado no final.*
    """)
    
    # === QUIZ R√ÅPIDO (para engajar desde o in√≠cio) ===
    st.info("üéØ Teste r√°pido: Voc√™ entende de custos?")

    # --- quest√£o (estrutura solicitada) ---
    question = [
        {
            "type": "multiple_choice",
            "question": "Se uma empresa vende mais, mas lucra menos, o problema provavelmente √©:",
            "options": [
                "A) Falta de marketing",
                "B) Pre√ßo baixo demais",
                "C) Custo mal calculado ou mal alocado",
                "D) Crise econ√¥mica"
            ],
            "answer": 2,  # √≠ndice correto
            "explanation": "O n√∫cleo da Gest√£o de Custos est√° em entender e alocar corretamente os custos."
        }
    ]

    # pega a primeira (√∫nica) quest√£o para o quiz r√°pido
    q = question[0]

    # --- estado minimalista e seguro ---
    if "quiz_done" not in st.session_state:
        st.session_state.quiz_done = False
        st.session_state.quiz_choice = None

    page_name = st.session_state.get("pagina", "P√°gina de Abertura")

    # wrapper seguro para logging (garante que falha no logger n√£o quebre a UI)
    def safe_log_interacao(nome, pagina, acao):
        try:
            log_interacao_google(nome=nome, pagina=pagina, acao=acao)
        except Exception:
            # falha silenciosa no log para n√£o interromper o app
            pass

    st.markdown(f"**{q['question']}**")

    # --- formul√°rio simples ---
    with st.form("quiz_form"):
        choices = ["-- Selecione --"] + q["options"]
        escolha = st.selectbox("Escolha uma op√ß√£o:", choices, index=0, key="quiz_select_0")
        enviar = st.form_submit_button("‚úÖ Verificar resposta")

    # --- processamento do submit ---
    if enviar:
        if escolha == "-- Selecione --":
            st.warning("‚ö†Ô∏è Por favor, selecione uma op√ß√£o antes de verificar!")
            safe_log_interacao(nome_usuario, page_name, "quiz_sem_resposta")
        else:
            idx = q["options"].index(escolha)  # mapeia para √≠ndice dentro de q['options']
            st.session_state.quiz_choice = idx
            st.session_state.quiz_done = True

            if idx == q["answer"]:
                st.success("üî• Acertou! " + q.get("explanation", ""))
                st.balloons()
                safe_log_interacao(nome_usuario, page_name, "quiz_acertou")
            else:
                st.warning(f"üí° Quase! Resposta correta: {q['options'][q['answer']]}.")
                st.info(q.get("explanation", ""))
                safe_log_interacao(nome_usuario, page_name, "quiz_errou")

    # --- se j√° respondeu em sess√£o anterior, reapresenta feedback ---
    elif st.session_state.quiz_done:
        idx = st.session_state.quiz_choice
        if idx == q["answer"]:
            st.success("üî• Acertou! " + q.get("explanation", ""))
        else:
            st.warning(f"üí° Resposta correta: {q['options'][q['answer']]}.")
            st.info(q.get("explanation", ""))

    st.title("üìù Simulador de Prova - Custeio por Absor√ß√£o")
      st.markdown("""
      Teste seus conhecimentos sobre custeio por absor√ß√£o b√°sico e avan√ßado.
      *Responda todas as quest√µes e verifique seu resultado no final.*
      """)
      
      # Sistema de pontua√ß√£o
      if 'score' not in st.session_state:
          st.session_state.score = 0
          st.session_state.answers = {}
      
      # Quest√µes
      questions = [
          {
              "type": "multiple_choice",
              "question": "1. Qual a f√≥rmula correta do Custo de Produ√ß√£o do Per√≠odo (CPP)?",
              "options": [
                  "A",
                  "B",
                  "C",
                  "D"
              ],
              "answer": 0,
              "explanation": "O CPP √© a soma de Mat√©ria-Prima (MP), M√£o de Obra Direta (MOD) e Custos Indiretos de Fabrica√ß√£o (CIF)."
          },
          {
          "type": "multiple_choice",
          "question": "Uma ind√∫stria possui dois departamentos auxiliares: Manuten√ß√£o e Refeit√≥rio. Os custos mensais s√£o R\$ 10.000 para Manuten√ß√£o e R\$ 5.000 para Refeit√≥rio. Se os departamentos produtivos utilizam 70% da Manuten√ß√£o e 60% do Refeit√≥rio, quanto ser√° alocado ao setor produtivo no total?",
          "options": [
              "R\$ 10.000",
              "R\$ 10.500",
              "R\$ 11.000",
              "R\$ 11.500",
              "R\$ 12.000",
          ],
          "answer": 0,
          "explanation": "Manuten√ß√£o: 70% x 10.000 = 7.000. Refeit√≥rio: 60% x 5.000 = 3.000. Total alocado ao setor produtivo: 7.000 + 3.000 = R\$ 10.000."
          }
      ]
      
      # Formul√°rio de quest√µes
      with st.form("test_form"):
          st.subheader("Quest√µes")
          
          for i, q in enumerate(questions):
              st.markdown(f"**{q['question']}**")
              
              if q['type'] == 'multiple_choice':
                  user_answer = st.radio(
                      f"Op√ß√µes Q{i+1}",
                      q['options'],
                      index=None,
                      key=f"q{i}"
                  )
                  st.session_state.answers[i] = q['options'].index(user_answer) if user_answer else None
                  
              elif q['type'] == 'true_false':
                  user_answer = st.radio(
                      f"Verdadeiro/Falso Q{i+1}",
                      ["Verdadeiro", "Falso"],
                      index=None,
                      key=f"q{i}"
                  )
                  st.session_state.answers[i] = (user_answer == "Verdadeiro") if user_answer else None
                  
              elif q['type'] in ['calculation', 'case_analysis']:
                  user_answer = st.number_input(
                      f"Resposta Q{i+1} (R\$)",
                      value=None,
                      step=1000,
                      key=f"q{i}"
                  )
                  st.session_state.answers[i] = user_answer if user_answer is not None else None
          
          submitted = st.form_submit_button("üì• Submeter Respostas")
      
      # Corre√ß√£o
      if submitted:
          st.session_state.score = 0
          st.divider()
          st.subheader("üîç Resultado")
          
          for i, q in enumerate(questions):
              st.markdown(f"**Q{i+1}:** {q['question']}")
              
              if st.session_state.answers.get(i) is None:
                  st.error("N√£o respondida")
                  continue
              
              if q['type'] in ['multiple_choice', 'true_false']:
                  if st.session_state.answers[i] == q['answer']:
                      st.success(f"‚úÖ Correta! {q['explanation']}")
                      st.session_state.score += 1
                  else:
                      correct = q['options'][q['answer']] if q['type'] == 'multiple_choice' else "Verdadeiro" if q['answer'] else "Falso"
                      st.error(f"‚ùå Incorreta. Resposta correta: {correct}. {q['explanation']}")
              
              elif q['type'] in ['calculation', 'case_analysis']:
                  tolerance = q.get('tolerance', 0.01 * q['answer'])
                  if abs(st.session_state.answers[i] - q['answer']) <= tolerance:
                      st.success(f"‚úÖ Correta! {q['explanation']}")
                      st.session_state.score += 1
                  else:
                      st.error(f"‚ùå Incorreta. Resposta correta: R\$ {q['answer']:,.2f}. {q['explanation']}")
          
          # Resultado final
          st.divider()
          score_percent = (st.session_state.score / len(questions)) * 100
          st.metric("Pontua√ß√£o Final", 
                   f"{st.session_state.score}/{len(questions)} ({score_percent:.0f}%)")
          
          if score_percent >= 70:
              st.success("üéâ Parab√©ns! Voc√™ domina o custeio por absor√ß√£o!")
          elif score_percent >= 40:
              st.warning("üìö Bom esfor√ßo! Reveja os conceitos e tente novamente!")
          else:
              st.error("‚úèÔ∏è Estude mais os fundamentos antes de tentar novamente.")
          
         
if __name__ == "__main__":
    main()
