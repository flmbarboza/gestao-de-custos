import streamlit as st
import pandas as pd
import plotly.express as px
from graphviz import Digraph 

def main():
    st.title("üìä Custeio por Absor√ß√£o")

        # Lista de cards
    cards = [
        {"title": "Mat√©ria-Prima (MP, ou MD - Material Direto)", "formula": "MP = EIMP + Compra MP - EFMP"},
        {"title": "Custo de Produ√ß√£o do Per√≠odo (CPP)", "formula": "CPP = MP + MOD + CIF"},
        {"title": "Custo do Produto Acabado (CPA)", "formula": "CPA = CPP + EIPP - EFPP"},
        {"title": "Custo dos Produtos Vendidos (CPV)", "formula": "CPV = CPA + EIPA - EFPA"}
    ]

    # Renderiza√ß√£o dos cards em 3 colunas
    cols = st.columns(2)
    
    for idx, card in enumerate(cards):
        with cols[idx % 2]:
            st.markdown(
                f"""
                <div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; box-shadow: 2px 2px 10px rgba(0,0,0,0.1); margin-bottom: 20px;">
                    <h4 style="color: #0e1117;">{card['title']}</h4>
                    <p style="font-size: 18px; color: #262730;"><strong>{card['formula']}</strong></p>
                </div>
                """,
                unsafe_allow_html=True
            )
    st.markdown("""
    ### üßÆ Esquema B√°sico
    ```
    1o. Passo) Separar Custos e Despesas
    2o. Passo) Apropriar dos Custos Diretos
    3o. Passo) Rateio dos Custos Indiretos
    ```

    Veja a figura para entender o esquema:
    """)

    # Cria√ß√£o do diagrama
    dot = Digraph('CusteioPorAbsorcao')
    dot.attr(rankdir='LR', splines='curved')
    
    node_attr = {'shape': 'box', 'style': 'rounded,filled', 'color': 'cyan', 'fontname': 'Arial', 'fontsize': '6'}

    # Criar cluster para 1o passo
    with dot.subgraph(name='cluster_1') as c:
        c.attr(label='1o. passo', fontsize='20', fontname='Arial', labelloc='t', style='dashed')
        # N√≥s alinhados verticalmente (rank=same para alinhamento horizontal, mas aqui, com rankdir=LR, 'same' alinha vertical)
        c.attr(rank='same')
    
        c.node('C', 'Custos', **node_attr)
        c.node('x', label='vs', shape='none')
        c.node('D', 'Despesas', **node_attr)

    # N√≥s principais
    #dot.node('C', 'Custos', **node_attr)
    #dot.node('D', 'Despesas', **node_attr)
    dot.node('V', 'Vendas', **node_attr)
    dot.node('R', 'Resultado', **node_attr)
    
    # N√≥s CD e CI
    dot.node('CI', 'Indiretos', **node_attr)
    dot.node('CD', 'Diretos', **node_attr)
    
    # Conex√µes C -> CD e CI (sem minlen para n√£o alongar aqui)
    dot.edge('C', 'CI')
    dot.edge('C', 'CD')
    
    # Produtos
    dot.node('PA', 'Produto A', **node_attr)
    dot.node('PB', 'Produto B', **node_attr)
    dot.node('PC', 'Produto C', **node_attr)
    
    # Estoque e CPV
    dot.node('E', 'Estoque', **node_attr)
    dot.node('CPV', 'Custo dos\nProdutos\nVendidos', **node_attr)
    
    # Edges que saem de CD ‚Äî tamb√©m com minlen maior para alongar
    dot.edge('CD', 'PA', color='blue', penwidth='2', arrowhead='vee', style='solid', minlen='3')
    dot.edge('CD', 'PB', color='blue', penwidth='2', arrowhead='vee', style='solid', minlen='3')
    dot.edge('CD', 'PC', color='blue', penwidth='2', arrowhead='vee', style='solid', minlen='3')
    
    # Edges que saem de CI ‚Äî com minlen maior para alongar s√≥ essas arestas
    dot.edge('CI', 'PA', xlabel="Rateio", color="red", fontcolor="red", style='bold', minlen='3')
    dot.edge('CI', 'PB', xlabel="Rateio", color="red", fontcolor="red", style='bold', minlen='3')
    dot.edge('CI', 'PC', xlabel="Rateio", color="red", fontcolor="red", style='bold', minlen='3')
    
    # Produtos para Estoque
    dot.edge('PA', 'E')
    dot.edge('PB', 'E')
    dot.edge('PC', 'E')
    
    # Estoque para CPV
    dot.edge('E', 'CPV')
    
    # CPV para Resultado
    dot.edge('CPV', 'R')
    
    # Despesas para Resultado
    dot.edge('D', 'R', minlen='2')
    
    # Vendas para Resultado
    dot.edge('V', 'R')
    
    # Exibir no Streamlit
    st.graphviz_chart(dot)

    # Simulador interativo
    st.subheader("üì± Simulador de Custeio")

    with st.expander("üîß Simulador Interativo de Custeio por Absor√ß√£o", expanded=False):
        # Container principal
        with st.container():
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("**Mat√©ria-Prima**")
                eimp = st.number_input("Estoque Inicial MP (R$):", min_value=0, value=2000, step=100)
                compras_mp = st.number_input("Compras MP (R$):", min_value=0, value=8000, step=100)
                efmp = st.number_input("Estoque Final MP (R$):", min_value=0, value=1000, step=100)
                mp = eimp + compras_mp - efmp
                st.metric("Mat√©ria-Prima Calculada", f"R$ {mp:,.2f}", 
                         delta=f"EIMP + Compras - EFMP = {eimp} + {compras_mp} - {efmp}")
                
            with col2:
                st.markdown("**Custos de Produ√ß√£o**")
                mod = st.number_input("M√£o de Obra Direta (R$):", min_value=0, value=5000, step=100)
                cif = st.number_input("Custos Indiretos (R$):", min_value=0, value=3000, step=100)
                eipp = st.number_input("Estoque Inicial PP (R$):", min_value=0, value=1500, step=100)
                efpp = st.number_input("Estoque Final PP (R$):", min_value=0, value=1000, step=100)
                
            with col3:
                st.markdown("**Produtos Acabados**")
                eipa = st.number_input("Estoque Inicial PA (R$):", min_value=0, value=2000, step=100)
                efpa = st.number_input("Estoque Final PA (R$):", min_value=0, value=1500, step=100)
                unidades_vendidas = st.number_input("Unidades Vendidas:", min_value=0, value=800, step=10)
        
        # C√°lculos
        if st.button("üî¢ Calcular", type="primary"):
            cpp = mp + mod + cif
            cpa = cpp + eipp - efpp
            cpv = cpa + eipa - efpa
            custo_unitario = cpv / unidades_vendidas if unidades_vendidas > 0 else 0
            
            resultados = pd.DataFrame({
                "Indicador": ["CPP (Custo de Produ√ß√£o do Per√≠odo)", 
                             "CPA (Custo de Produ√ß√£o Acumulado)", 
                             "CPV (Custo dos Produtos Vendidos)",
                             "Custo Unit√°rio"],
                "Valor (R$)": [cpp, cpa, cpv, custo_unitario],
                "F√≥rmula": [
                    "MP + MOD + CIF",
                    "CPP + EIPP - EFPP",
                    "CPA + EIPA - EFPA",
                    "CPV / Unidades Vendidas"
                ],
                "C√°lculo": [
                    f"{mp} + {mod} + {cif}",
                    f"{cpp} + {eipp} - {efpp}",
                    f"{cpa} + {eipa} - {efpa}",
                    f"{cpv} / {unidades_vendidas}" if unidades_vendidas > 0 else "N/A"
                ]
            })
            
            # Exibi√ß√£o dos resultados
            st.success("üéØ Resultados do Custeio por Absor√ß√£o")
            
            col_res1, col_res2, col_res3 = st.columns(3)
            with col_res1:
                st.metric("CPP", f"R$ {cpp:,.2f}")
            with col_res2:
                st.metric("CPA", f"R$ {cpa:,.2f}")
            with col_res3:
                st.metric("CPV", f"R$ {cpv:,.2f}")
            
            st.dataframe(resultados.style.format({"Valor (R$)": "R$ {:,.2f}"}), hide_index=True)
            
            # Gr√°fico
            fig = px.bar(resultados.iloc[:3], 
                         x="Indicador", 
                         y="Valor (R$)",
                         title="Indicadores de Custeio",
                         text_auto='.2f',
                         color="Indicador")
            st.plotly_chart(fig, use_container_width=True)

    #st.divider()

    # Exemplos setoriais
    st.subheader("üìå Exemplos Pr√°ticos por Setor")
    st.write("")
    
    with st.expander("Clique aqui para ver:", expanded=False):
        x 
        exemplos = {
        "Industrial": {
            "icon": "üè≠",
            "titulo": "F√°brica de M√≥veis",
            "dados": {
                "EIMP": 5000,
                "Compras_MP": 20000,
                "EFMP": 3000,
                "MOD": 15000,
                "CIF": 8000,
                "EIPP": 4000,
                "EFPP": 2000,
                "EIPA": 6000,
                "EFPA": 3000,
                "Unidades_Vendidas": 500
            },
            "premissas": [
                "Alto estoque inicial de madeira (mat√©ria-prima)",
                "Produ√ß√£o cont√≠nua com produtos em processo",
                "Estoque significativo de produtos acabados",
                "CIF inclui deprecia√ß√£o de m√°quinas e energia industrial"
            ],
            "conclusoes": [
                "CPP elevado devido ao intensivo uso de m√£o-de-obra especializada",
                "Necessidade de capital de giro para manter estoques",
                "Custo unit√°rio competitivo pela escala de produ√ß√£o"
            ]
        },
        "Com√©rcio": {
            "icon": "üõí",
            "titulo": "Distribuidora de Eletr√¥nicos",
            "dados": {
                "EIMP": 0,
                "Compras_MP": 0,
                "EFMP": 0,
                "MOD": 8000,
                "CIF": 5000,
                "EIPP": 0,
                "EFPP": 0,
                "EIPA": 15000,
                "EFPA": 8000,
                "Unidades_Vendidas": 1
            },
            "premissas": [
                "Sem mat√©ria-prima (revenda de produtos prontos)",
                "MOD representa log√≠stica e montagem",
                "CIF inclui armazenagem e embalagem",
                "Estoque √∫nico de produtos acabados"
            ],
            "conclusoes": [
                "Estrutura de custos mais simples que ind√∫stria",
                "Giro de estoque √© o indicador cr√≠tico",
                "Custo unit√°rio igual ao CPV (venda por unidade)"
            ]
        },
        "Servi√ßos": {
            "icon": "üë®‚Äç‚öïÔ∏è",
            "titulo": "Cl√≠nica M√©dica",
            "dados": {
                "EIMP": 1000,
                "Compras_MP": 2000,
                "EFMP": 500,
                "MOD": 25000,
                "CIF": 12000,
                "EIPP": 0,
                "EFPP": 0,
                "EIPA": 0,
                "EFPA": 0,
                "Unidades_Vendidas": 600
            },
            "premissas": [
                "Pequeno estoque de materiais m√©dicos",
                "MOD representa 80% dos custos (honor√°rios)",
                "CIF inclui aluguel e equipamentos",
                "Sem estoques de processo ou produtos (servi√ßo imediato)"
            ],
            "conclusoes": [
                "Estrutura de custos concentrada em pessoal",
                "Baixo investimento em estoques",
                "Custo unit√°rio vari√°vel conforme produtividade"
            ]}}

        # Seletor interativo
        setor_selecionado = st.selectbox(
            "Selecione o setor para an√°lise:",
            options=list(exemplos.keys()),
            format_func=lambda x: f"{exemplos[x]['icon']} {x}"
        )
    
        exemplo = exemplos[setor_selecionado]
        dados = exemplo['dados']
    
        with st.expander(f"üîç {exemplo['icon']} Premissas do Setor {setor_selecionado}", expanded=True):
            st.markdown("**Por que esses valores?**")
            for premissa in exemplo['premissas']:
                st.markdown(f"- {premissa}")
            
            st.markdown("\n**Justificativas para estoques:**")
            if dados['EIMP'] == 0 and dados['EIPA'] == 0:
                st.warning("Estoques zerados: t√≠pico de servi√ßos que n√£o mant√™m materiais em estoque")
            elif dados['EIPP'] == 0:
                st.info("Sem produtos em processo: caracter√≠stica de com√©rcio/servi√ßos sem produ√ß√£o")
            else:
                st.success("Todos estoques ativos: padr√£o industrial com produ√ß√£o cont√≠nua")
    
        # C√°lculos (mesma l√≥gica anterior)
        mp = dados['EIMP'] + dados['Compras_MP'] - dados['EFMP']
        cpp = mp + dados['MOD'] + dados['CIF']
        cpa = cpp + dados['EIPP'] - dados['EFPP']
        cpv = cpa + dados['EIPA'] - dados['EFPA']
        custo_unit = cpv / dados['Unidades_Vendidas'] if dados['Unidades_Vendidas'] > 0 else 0
    
        # Visualiza√ß√£o dos resultados
        col_res1, col_res2 = st.columns(2)
        with col_res1:
            st.markdown("**üìä Fluxo de Custos**")
            st.metric("MP (Mat√©ria-Prima)", f"R$ {mp:,.2f}")
            st.metric("CPP (Produ√ß√£o)", f"R$ {cpp:,.2f}")
            st.metric("CPA (Acabados)", f"R$ {cpa:,.2f}")
        
        with col_res2:
            st.markdown("**üí∞ Resultados Finais**")
            st.metric("CPV (Vendas)", f"R$ {cpv:,.2f}", delta_color="inverse")
            st.metric("Custo Unit√°rio", f"R$ {custo_unit:,.2f}/unidade")
    
        # Conclus√µes interativas
        #st.divider()
        with st.expander("üí° Conclus√µes e An√°lise Gerencial", expanded=True):
            st.markdown(f"**Li√ß√µes para o setor {setor_selecionado}:**")
            for conclusao in exemplo['conclusoes']:
                st.markdown(f"‚úÖ {conclusao}")
            
            if st.checkbox("üîé Mostrar an√°lise detalhada"):
                if setor_selecionado == "Industrial":
                    st.markdown("""
                    **An√°lise Industrial:**
                    - Alta participa√ß√£o de MOD ({(dados['MOD']/cpp):.1%}) indica processo artesanal
                    - Estoque final de MP (R$ {dados['EFMP']:,.2f}) sugere compras eficientes
                    - CIF elevado ({(dados['CIF']/cpp):.1%}) requer an√°lise de otimiza√ß√£o
                    """.format(**dados))
                
                elif setor_selecionado == "Com√©rcio":
                    st.markdown("""
                    **An√°lise Comercial:**
                    - Custo fixo significativo ({(dados['CIF']/(dados['MOD']+dados['CIF'])):.1%} da estrutura)
                    - Giro de estoque: {(cpv/dados['EIPA']):.1f}x (ideal >4x para eletr√¥nicos)
                    """)
                
                else:
                    st.markdown("""
                    **An√°lise de Servi√ßos:**
                    - Pessoal representa {(dados['MOD']/(dados['MOD']+dados['CIF'])):.1%} dos custos
                    - Custo por atendimento: R$ {custo_unit:,.2f} (benchmark: R$ 50-150)
                    """)
    
        # Gr√°fico comparativo
        fig = px.pie(
            names=["Mat√©ria-Prima", "M√£o-de-Obra", "Custos Indiretos"],
            values=[mp, dados['MOD'], dados['CIF']],
            title=f"Composi√ß√£o do CPP - {setor_selecionado}"
        )
        st.plotly_chart(fig, use_container_width=True)
    #st.divider()    
    if st.button("üëâ Avan√ßar para o pr√≥ximo t√≥pico: Conhecer o M√©todo de Custeio Vari√°vel"):
        st.switch_page("pages/4_üìà_Custeio_Variavel.py")


if __name__ == "__main__":
    main()
